---
layout: post
title:  "Weeks 1 to 2"
date:   2018-05-26 14:10:51 +0800
categories: GSoC
tags: GSoC
description: MAY-14-2018 to MAY-26-2018.
---
# Tasks completed in weeks 1 to 2

1. Approximation algorithms and greedy heuristics for the following problems:
  * Travelling Salesman
  * Minimum Vertex Cover
  * Minimum Steiner Tree
  * Minimum Maximal Matching
  * Greedy Coloring with Interchange
  * Independent Vertex Set
  * Dominating Vertex Set
  * Local Node Connectivity
2. Implemented Johnson's Shortest Path Algorithm.
3. Improved Run-time of Kruskal's Minimum Spanning Tree.
4. Created the Union-Find data structure. 

# Details

### Approximation algorithms and Greedy Hueristics
I implemented several straight forward approximation algorithms and greedy hueristics.
I deviated from the proposal in the solution to Travelling Salesman because [Christofides algorithm](https://en.wikipedia.org/wiki/Christofides_algorithm) would require linear program solvers and LightGraphs has a policy of minimising dependencies.
A common problem I faced while implementing the algorithms is, using a 'distributed for loop' would result in type instable code.

#### **Example: Independent Vertex Set**
Problem: Find the largest subset of vertices of the graph, such that no two vertices are adjacent.
The solutions are of the following form:
1. Set `ind_set` as the empty set.
2. Using some method, choose a vertex that is not adjacent to any vertex in `ind_set` or in `ind_set` and add it to `ind_set`.
3. Return `ind_set`.

*Program 1:* `degree_independent_set(g)`

Step 2 is performed finding the vertex that will "invalidate" the fewest vertices. That is, it will choose the vertex that is adjacent to the fewest valid vertices (not in `ind_set` or adjacent to `ind_set`).

*Program 2:* `random_maximal_independent_set(g, reps=1; parallel=false)` 

Step 2 is performed by randomly choosing a vertex from the set of vertices that is not in `ind_set` or adjacent to `ind_set`.
The solution is repeated `reps` times and the largest set is returned. If `parallel` is set true then the repetitions are done in parallel.

It easy to see that both these algorithms will always return an independent set. It may not return the maximum independent set, but the returned independent set is always maximal. i.e. inserting any vertex into it will make it a non-independent set.

### Johnson's Shortest Path Algorithm

Implemented [Johnson's Shortest Path Algorithm](https://en.wikipedia.org/wiki/Johnson%27s_algorithm).
This algorithms invloves applying a transform to the edge weights and then applying Dijkstra on each vertex. 
I initially failed to consider the case where the edge weights are immutable. 
An additional |E| overhead will have to be incurred if the input includes immutable edge weights.

Eg. `johnson_shortest_paths(CompleteGraph(100), LowerTriangular(rand(100, 100))` would have resulted in an error because Lower Triangular Matrices are immutable.

### Kruskal's Minimum Spanning Tree
`kruskal(g, distmx=weights(g))`
In this program, we iterate over the edges of graph `g` in the ascending order of weights (stored in `distmx`) until a spanning tree is formed.
A priority queue was being used to obtain the edge with the smallest weight.
I replaced the priority queue with a sorting function. I also avoided creating a 'struct' to store the edges and its weights by using [sortperm](https://docs.julialang.org/en/stable/stdlib/sort/) so I could first sort the weights and then permute the edges.

For a complete graph with 1,000 vertices, the run-time improved from **193 ms** to **28 ms**.

For a path graph with 10,000 vertices, the run-time improved from **3.88 ms** to **1.15 ms**.

I replaced
{% highlight julia %} 
edge_wt_list = [KruskalHeapEntry(Edge(src(e), dst(e)), distmx[src(e), dst(e)]) for e in edges(g)]
heapify!(edge_wt_list)
while !isempty(edge_wt_list)
    e = (heappop!(edge_wt_list)).edge
    DO SOMETHING
end
{% endhighlight %}
with 
{% highlight julia %} 
edge_list = collect(edges(g))
wt_list = [distmx[e.src, e.dst] for e in edge_list]
for e in edge_list[sortperm(wt_list)]
	DO SOMETHING
end
{% endhighlight %}


### Union Find Data Structure

This data structure is already available in DataStructures.jl. I coded a version of it that would be optimised for graph algorithms that involve iteratively adding edges to the graph. The main difference is my implementation does not maintain ranks for each element. However, there was only a minor improvement in performance when I coded Kruskal's MST using my implementation of Union Find. Hence, maintaining this code in LightGraphs may not be worthwhile.

For a complete graph with 1,000 vertices, the run-time improved from **28 ms** to **26 ms**.

# Lessons Learned
I lost 2 days of code while using git. Always commit before switching/deleting branches.
